# format of a line in this file:
# <instruction name> "<instruction pseudo code>"

Format: l.add rD,rA,rB
32-bit: implementation: rD[31:0] <- rA[31:0] + rB[31:0]; SR[CY] <- carry (unsigned overflow); SR[OV] <- signed overflow
Exceptions: Range Exception on overflow if SR[OVE] and AECR[OVADDE] are set; Range Exception on carry if SR[OVE] and AECR[CYADDE] are set.

Format: l.addc rD,rA,rB
32-bit: implementation: rD[31:0] <- rA[31:0] + rB[31:0] + SR[CY]; SR[CY] <- carry (unsigned overflow); SR[OV] <- signed overflow
Exceptions: Range Exception on overflow if SR[OVE] and AECR[OVADDE] are set; Range Exception on carry if SR[OVE] and AECR[CYADDE] are set.

Format: l.addi rD,rA,I
32-bit: implementation: rD[31:0] <- rA[31:0] + exts(Immediate); SR[CY] <- carry (unsigned overflow); SR[OV] <- signed overflow
Exceptions: Range Exception on overflow if SR[OVE] and AECR[OVADDE] are set; Range Exception on carry if SR[OVE] and AECR[CYADDE] are set.

Format: l.addic rD,rA,I
32-bit: implementation: rD[31:0] <- rA[31:0] + exts(Immediate) + SR[CY]; SR[CY] <- carry (unsigned overflow); SR[OV] <- signed overflow
Exceptions: Range Exception on overflow if SR[OVE] and AECR[OVADDE] are set; Range Exception on carry if SR[OVE] and AECR[CYADDE] are set.

Format: l.and rD,rA,rB
32-bit: implementation: rD[31:0] <- rA[31:0] AND rB[31:0]
Exceptions: None

Format: l.andi rD,rA,K
32-bit: implementation: rD[31:0] <- rA[31:0] AND extz(Immediate)
Exceptions: None

Format: l.bf N
32-bit: implementation: EA <- exts(Immediate << 2) + BranchInsnAddr; PC <- EA if SR[F] set
Exceptions: None

Format: l.bnf N
32-bit: implementation: EA <- exts(Immediate << 2) + BranchInsnAddr; PC <- EA if SR[F] cleared
Exceptions: None

Format: l.cmov rD,rA,rB
32-bit: implementation: rD[31:0] <- SR[F] ? rA[31:0] : rB[31:0]
Exceptions: None

Format: l.csync 
32-bit: implementation: context-synchronization
Exceptions: None

Format: l.cust1 
32-bit: implementation: N/A
Exceptions: N/A

Format: l.cust2 
32-bit: implementation: N/A
Exceptions: N/A

Format: l.cust3 
32-bit: implementation: N/A
Exceptions: N/A

Format: l.cust4 
32-bit: implementation: N/A
Exceptions: N/A

Format: l.cust5 rD,rA,rB,L,K
32-bit: implementation: N/A
Exceptions: N/A

Format: l.cust6 
32-bit: implementation: N/A
Exceptions: N/A

Format: l.cust7 
32-bit: implementation: N/A
Exceptions: N/A

Format: l.cust8 
32-bit: implementation: N/A
Exceptions: N/A

Format: l.div rD,rA,rB
32-bit: implementation: rD[31:0] <- rA[31:0] / rB[31:0]; SR[OV] <- rB[31:0] == 0
Exceptions: Range Exception when divisor is zero if SR[OVE] and AECR[DBZE] are set.

Format: l.divu rD,rA,rB
32-bit: implementation: rD[31:0] <- rA[31:0] / rB[31:0]; SR[CY] <- rB[31:0] == 0
Exceptions: Range Exception when divisor is zero if SR[OVE] and AECR[DBZE] are set.

Format: l.extbs rD,rA
32-bit: implementation: rD[31:8] <- rA[7]; rD[7:0] <- rA[7:0]
Exceptions: None

Format: l.extbz rD,rA
32-bit: implementation: rD[31:8] <- 0; rD[7:0] <- rA[7:0]
Exceptions: None

Format: l.exths rD,rA
32-bit: implementation: rD[31:16] <- rA[15]; rD[15:0] <- rA[15:0]
Exceptions: None

Format: l.exthz rD,rA
32-bit: implementation: rD[31:16] <- 0; rD[15:0] <- rA[15:0]
Exceptions: None

Format: l.extws rD,rA
32-bit: implementation: rD[31:0] <- rA[31:0]
Exceptions: None

Format: l.extwz rD,rA
32-bit: implementation: rD[31:0] <- rA[31:0]
Exceptions: None

Format: l.ff1 rD,rA,rB
32-bit: implementation: rD[31:0] <- rA[0] ? 1 : rA[1] ? 2 ... rA[31] ? 32 : 0
Exceptions: None

Format: l.fl1 rD,rA,rB
32-bit: implementation: rD[31:0] <- rA[31] ? 32 : rA[30] ? 31 ... rA[0] ? 1 : 0
Exceptions: None

Format: l.j N
32-bit: implementation: PC <- exts(Immediate << 2) + JumpInsnAddr
Exceptions: TLB miss; Page fault; Bus error.

Format: l.jal N
32-bit: implementation: PC <- exts(Immediate << 2) + JumpInsnAddr; LR <- CPUCFGR[ND] ? JumpInsnAddr + 4 : DelayInsnAddr + 4
Exceptions: TLB miss; Page fault; Bus error.

Format: l.jalr rB
32-bit: implementation: PC <- rB; LR <- CPUCFGR[ND] ? JumpInsnAddr + 4 : DelayInsnAddr + 4.
Exceptions: Alignment; TLB miss; Page fault; Bus error.

Format: l.jr rB
32-bit: implementation: PC <- rB
Exceptions: Alignment; TLB miss; Page fault; Bus error.

Format: l.lbs rD,I(rA)
32-bit: implementation: EA <- exts(Immediate) + rA[31:0]; rD[7:0] <- (EA)[7:0]; rD[31:8] <- (EA)[7]
Exceptions: TLB miss; Page fault; Bus error.

Format: l.lbz rD,I(rA)
32-bit: implementation: EA <- exts(Immediate) + rA[31:0]; rD[7:0] <- (EA)[7:0]; rD[31:8] <- 0
Exceptions: TLB miss; Page fault; Bus error.

Format: l.ld rD,I(rA)
32-bit: implementation: N/A
Exceptions: TLB miss; Page fault; Bus error; Alignment

Format: l.lhs rD,I(rA)
32-bit: implementation: EA <- exts(Immediate) + rA[31:0]; rD[15:0] <- (EA)[15:0]; rD[31:16] <- (EA)[15]
Exceptions: TLB miss; Page fault; Bus error; Alignment

Format: l.lhz rD,I(rA)
32-bit: implementation: EA <- exts(Immediate) + rA[31:0]; rD[15:0] <- (EA)[15:0]; rD[31:16] <- 0
Exceptions: TLB miss; Page fault; Bus error; Alignment

Format: l.lwa rD,I(rA)
32-bit: implementation: EA <- exts(Immediate) + rA[31:0]; rD[31:0] <- (EA)[31:0]; atomic_reserve[to_phys(EA)] <- 1
Exceptions: TLB miss; Page fault; Bus error; Alignment

Format: l.lws rD,I(rA)
32-bit: implementation: EA <- exts(Immediate) + rA[31:0]; rD[31:0] <- (EA)[31:0]
Exceptions: TLB miss; Page fault; Bus error; Alignment

Format: l.lwz rD,I(rA)
32-bit: implementation: EA <- exts(Immediate) + rA[31:0]; rD[31:0] <- (EA)[31:0]
Exceptions: TLB miss; Page fault; Bus error; Alignment

Format: l.mac rA,rB
32-bit: implementation: MACHI[31:0]MACLO[31:0] <- MACHI[31:0]MACLO[31:0] + rA[31:0] * rB[31:0]; SR[OV] <- signed overflow during addition stage
Exceptions: Range Exception on signed overflow if SR[OVE] and AECR[OVMACADDE] are set.

Format: l.maci rA,I
32-bit: implementation: MACHI[31:0]MACLO[31:0] <- MACHI[31:0]MACLO[31:0] + rA[31:0] * exts(Immediate); SR[OV] <- signed overflow during addition stage
Exceptions: Range Exception on signed overflow if SR[OVE] and AECR[OVMACADDE] are set.

Format: l.macrc rD
32-bit: implementation: synchronize-mac; rD[31:0] <- MACLO[31:0]; MACLO[31:0], MACHI[31:0] <- 0
Exceptions: None

Format: l.macu rA,rB
32-bit: implementation: MACHI[31:0]MACLO[31:0] <- MACHI[31:0]MACLO[31:0] + rA[31:0] * rB[31:0]; SR[CY] <- unsigned overflow during addition stage
Exceptions: Range Exception on unsigned overflow if SR[OVE] and AECR[CYMACADDE] are set.

Format: l.mfspr rD,rA,K
32-bit: implementation: rD[31:0] <- spr(rA OR Immediate)
Exceptions: None

Format: l.movhi rD,K
32-bit: implementation: rD[31:0] <- extz(Immediate) << 16
Exceptions: None

Format: l.msb rA,rB
32-bit: implementation: MACHI[31:0]MACLO[31:0] <- MACHI[31:0]MACLO[31:0] - rA[31:0] * rB[31:0]; SR[OV] <- signed overflow during subtraction stage
Exceptions: Range Exception on signed overflow if SR[OVE] and AECR[OVMACADDE] are set.

Format: l.msbu rA,rB
32-bit: implementation: MACHI[31:0]MACLO[31:0] <- MACHI[31:0]MACLO[31:0] - rA[31:0] * rB[31:0]; SR[CY] <- unsigned overflow during subtraction stage
Exceptions: Range Exception on signed overflow if SR[OVE] and AECR[CYMACADDE] are set.

Format: l.msync 
32-bit: implementation: Memory-synchronization
Exceptions: None

Format: l.mtspr rA,rB,K
32-bit: implementation: spr(rA OR Immediate) <- rB[31:0]
Exceptions: None

Format: l.mul rD,rA,rB
32-bit: implementation: rD[31:0] <- rA[31:0] * rB[31:0]; SR[OV] <- signed overflow
Exceptions: Range Exception on signed overflow if SR[OVE] and AECR[OVMULE] are set.

Format: l.muld rA,rB
32-bit: implementation: MACHI[31:0]MACLO[31:0] <- rA[31:0] * rB[31:0]
Exceptions: Range Exception on signed overflow if SR[OVE] and AECR[OVMULE] are set.

Format: l.muldu rA,rB
32-bit: implementation: MACHI[31:0]MACLO[31:0] <- rA[31:0] * rB[31:0]
Exceptions: Range Exception on signed overflow if SR[OVE] and AECR[CYMULE] are set.

Format: l.muli rD,rA,I
32-bit: implementation: rD[31:0] <- rA[31:0] * exts(Immediate); SR[OV] <- signed overflow
Exceptions: Range Exception on signed overflow if SR[OVE] and AECR[OVMULE] are set.

Format: l.mulu rD,rA,rB
32-bit: implementation: rD[31:0] <- rA[31:0] * rB[31:0]; SR[CY] <- carry (unsigned overflow)
Exceptions: Range Exception on unsigned overflow if SR[OVE] and AECR[CYMULE] are set.

Format: l.nop K
32-bit: implementation: N/A
Exceptions: None

Format: l.or rD,rA,rB
32-bit: implementation: rD[31:0] <- rA[31:0] OR rB[31:0]
Exceptions: None

Format: l.ori rD,rA,K
32-bit: implementation: rD[31:0] <- rA[31:0] OR extz(Immediate)
Exceptions: None

Format: l.psync 
32-bit: implementation: pipeline-synchronization
Exceptions: None

Format: l.rfe 
32-bit: implementation: PC <- EPCR; SR <- ESR
Exceptions: None

Format: l.ror rD,rA,rB
32-bit: implementation: rD[31-rB[4:0]:0] <- rA[31:rB[4:0]]; rD[31:32-rB[4:0]] <- rA[rB[4:0]-1:0]
Exceptions: None

Format: l.rori rD,rA,L
32-bit: implementation: rD[31-L:0] <- rA[31:L]; rD[31:32-L] <- rA[L-1:0]
Exceptions: None

Format: l.sb I(rA),rB
32-bit: implementation: EA <- exts(Immediate) + rA[31:0]; (EA)[7:0] <- rB[7:0]
Exceptions: TLB miss; Page fault; Bus error.

Format: l.sd I(rA),rB
32-bit: implementation: N/A
Exceptions: TLB miss; Page fault; Bus error; Alignment

Format: l.sfeq rA,rB
32-bit: implementation: SR[F] <- rA[31:0] == rB[31:0]
Exceptions: None

Format: l.sfeqi rA,I
32-bit: implementation: SR[F] <- rA[31:0] == exts(Immediate)
Exceptions: None

Format: l.sfges rA,rB
32-bit: implementation: SR[F] <- rA[31:0] >= rB[31:0]
Exceptions: None

Format: l.sfgesi rA,I
32-bit: implementation: SR[F] <- rA[31:0] >= exts(Immediate)
Exceptions: None

Format: l.sfgeu rA,rB
32-bit: implementation: SR[F] <- rA[31:0] >= rB[31:0]
Exceptions: None

Format: l.sfgeui rA,I
32-bit: implementation: SR[F] <- rA[31:0] >= exts(Immediate)
Exceptions: None

Format: l.sfgts rA,rB
32-bit: implementation: SR[F] <- rA[31:0] > rB[31:0]
Exceptions: None

Format: l.sfgtsi rA,I
32-bit: implementation: SR[F] <- rA[31:0] > exts(Immediate)
Exceptions: None

Format: l.sfgtu rA,rB
32-bit: implementation: SR[F] <- rA[31:0] > rB[31:0]
Exceptions: None

Format: l.sfgtui rA,I
32-bit: implementation: SR[F] <- rA[31:0] > exts(Immediate)
Exceptions: None

Format: l.sfles rA,rB
32-bit: implementation: SR[F] <- rA[31:0] <= rB[31:0]
Exceptions: None

Format: l.sflesi rA,I
32-bit: implementation: SR[F] <- rA[31:0] <= exts(Immediate)
Exceptions: None

Format: l.sfleu rA,rB
32-bit: implementation: SR[F] <- rA[31:0] <= rB[31:0]
Exceptions: None

Format: l.sfleui rA,I
32-bit: implementation: SR[F] <- rA[31:0] <= exts(Immediate)
Exceptions: None

Format: l.sflts rA,rB
32-bit: implementation: SR[F] <- rA[31:0] < rB[31:0]
Exceptions: None

Format: l.sfltsi rA,I
32-bit: implementation: SR[F] <- rA[31:0] < exts(Immediate)
Exceptions: None

Format: l.sfltu rA,rB
32-bit: implementation: SR[F] <- rA[31:0] < rB[31:0]
Exceptions: None

Format: l.sfltui rA,I
32-bit: implementation: SR[F] <- rA[31:0] < exts(Immediate)
Exceptions: None

Format: l.sfne rA,rB
32-bit: implementation: SR[F] <- rA[31:0] != rB[31:0]
Exceptions: None

Format: l.sfnei rA,I
32-bit: implementation: SR[F] <- rA[31:0] != exts(Immediate)
Exceptions: None

Format: l.sh I(rA),rB
32-bit: implementation: EA <- exts(Immediate) + rA[31:0]; (EA)[15:0] <- rB[15:0]
Exceptions: TLB miss; Page fault; Bus error; Alignment

Format: l.sll rD,rA,rB
32-bit: implementation: rD[31:rB[4:0]] <- rA[31-rB[4:0]:0]; rD[rB[4:0]-1:0] <- 0
Exceptions: None

Format: l.slli rD,rA,L
32-bit: implementation: rD[31:L] <- rA[31-L:0]; rD[L-1:0] <- 0
Exceptions: None

Format: l.sra rD,rA,rB
32-bit: implementation: rD[31-rB[4:0]:0] <- rA[31:rB[4:0]]; rD[31:32-rB[4:0]] <- rA[31]
Exceptions: None

Format: l.srai rD,rA,L
32-bit: implementation: rD[31-L:0] <- rA[31:L]; rD[31:32-L] <- rA[31]
Exceptions: None

Format: l.srl rD,rA,rB
32-bit: implementation: rD[31-rB[4:0]:0] <- rA[31:rB[4:0]]; rD[31:32-rB[4:0]] <- 0
Exceptions: None

Format: l.srli rD,rA,L
32-bit: implementation: rD[31-L:0] <- rA[31:L]; rD[31:32-L] <- 0
Exceptions: None

Format: l.sub rD,rA,rB
32-bit: implementation: rD[31:0] <- rA[31:0] - rB[31:0]; SR[CY] <- carry (unsigned overflow); SR[OV] <- signed overflow
Exceptions: Range Exception on overflow if SR[OVE] and AECR[OVADDE] are set; Range Exception on carry if SR[OVE] and AECR[CYADDE] are set.

Format: l.sw I(rA),rB
32-bit: implementation: EA <- exts(Immediate) + rA[31:0]; (EA)[31:0] <- rB[31:0]
Exceptions: TLB miss; Page fault; Bus error; Alignment

Format: l.swa I(rA),rB
32-bit: implementation: EA <- exts(Immediate) + rA[31:0]; if (atomic) (EA)[31:0] <- rB[31:0]; SR[F] <- atomic
Exceptions: TLB miss; Page fault; Bus error; Alignment

Format: l.sys K
32-bit: implementation: system-call-exception(K)
Exceptions: System Call

Format: l.trap K
32-bit: implementation: trap-exception()
Exceptions: Trap exception

Format: l.xor rD,rA,rB
32-bit: implementation: rD[31:0] <- rA[31:0] XOR rB[31:0]
Exceptions: None

Format: l.xori rD,rA,I
32-bit: implementation: rD[31:0] <- rA[31:0] XOR exts(Immediate)
Exceptions: None

Format: lf.add.d rD,rA,rB
32-bit: implementation: N/A
Exceptions: Floating Point

Format: lf.add.s rD,rA,rB
32-bit: implementation: rD[31:0] <- rA[31:0] + rB[31:0]
Exceptions: Floating Point

Format: lf.cust1.d rA,rB
32-bit: implementation: N/A
Exceptions: N/A

Format: lf.cust1.s rA,rB
32-bit: implementation: N/A
Exceptions: N/A

Format: lf.div.d rD,rA,rB
32-bit: implementation: N/A
Exceptions: Floating Point

Format: lf.div.s rD,rA,rB
32-bit: implementation: rD[31:0] <- rA[31:0] / rB[31:0]
Exceptions: Floating Point

Format: lf.ftoi.d rD,rA
32-bit: implementation: N/A
Exceptions: Floating Point

Format: lf.ftoi.s rD,rA
32-bit: implementation: rD[31:0] <- ftoi(rA[31:0])
Exceptions: Floating Point

Format: lf.itof.d rD,rA
32-bit: implementation: N/A
Exceptions: Floating Point

Format: lf.itof.s rD,rA
32-bit: implementation: rD[31:0] <- itof(rA[31:0])
Exceptions: Floating Point

Format: lf.madd.d rD,rA,rB
32-bit: implementation: N/A
Exceptions: Floating Point

Format: lf.madd.s rD,rA,rB
32-bit: implementation: FPMADDHI[31:0]FPMADDLO[31:0] <- rA[31:0] * rB[31:0] + FPMADDHI[31:0]FPMADDLO[31:0]
Exceptions: Floating Point

Format: lf.mul.d rD,rA,rB
32-bit: implementation: N/A
Exceptions: Floating Point

Format: lf.mul.s rD,rA,rB
32-bit: implementation: rD[31:0] <- rA[31:0] * rB[31:0]
Exceptions: Floating Point

Format: lf.rem.d rD,rA,rB
32-bit: implementation: N/A
Exceptions: Floating Point

Format: lf.rem.s rD,rA,rB
32-bit: implementation: rD[31:0] <- rA[31:0] % rB[31:0]
Exceptions: Floating Point

Format: lf.sfeq.d rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lf.sfeq.s rA,rB
32-bit: implementation: SR[F] <- rA[31:0] == rB[31:0]
Exceptions: None

Format: lf.sfge.d rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lf.sfge.s rA,rB
32-bit: implementation: SR[F] <- rA[31:0] >= rB[31:0]
Exceptions: None

Format: lf.sfgt.d rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lf.sfgt.s rA,rB
32-bit: implementation: SR[F] <- rA[31:0] > rB[31:0]
Exceptions: None

Format: lf.sfle.d rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lf.sfle.s rA,rB
32-bit: implementation: SR[F] <- rA[31:0] <= rB[31:0]
Exceptions: None

Format: lf.sflt.d rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lf.sflt.s rA,rB
32-bit: implementation: SR[F] <- rA[31:0] < rB[31:0]
Exceptions: None

Format: lf.sfne.d rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lf.sfne.s rA,rB
32-bit: implementation: SR[F] <- rA[31:0] != rB[31:0]
Exceptions: None

Format: lf.sub.d rD,rA,rB
32-bit: implementation: N/A
Exceptions: Floating Point

Format: lf.sub.s rD,rA,rB
32-bit: implementation: rD[31:0] <- rA[31:0] - rB[31:0]
Exceptions: Floating Point

Format: lv.add.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.add.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.adds.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.adds.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.addu.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.addu.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.addus.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.addus.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.all_eq.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.all_eq.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.all_ge.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.all_ge.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.all_gt.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.all_gt.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.all_le.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.all_le.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.all_lt.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.all_lt.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.all_ne.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.all_ne.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.and rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.any_eq.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.any_eq.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.any_ge.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.any_ge.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.any_gt.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.any_gt.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.any_le.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.any_le.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.any_lt.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.any_lt.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.any_ne.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.any_ne.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.avg.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.avg.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.cmp_eq.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.cmp_eq.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.cmp_ge.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.cmp_ge.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.cmp_gt.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.cmp_gt.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.cmp_le.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.cmp_le.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.cmp_lt.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.cmp_lt.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.cmp_ne.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.cmp_ne.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.cust1 
32-bit: implementation: N/A
Exceptions: N/A

Format: lv.cust2 
32-bit: implementation: N/A
Exceptions: N/A

Format: lv.cust3 
32-bit: implementation: N/A
Exceptions: N/A

Format: lv.cust4 
32-bit: implementation: N/A
Exceptions: N/A

Format: lv.madds.h rD,rA,rB

Note: The ORVDX instruction set is not completely specified. This instruction is incorrectly specified in that VMAC is not defined and implementation below does not match description.
32-bit: implementation: N/A
Exceptions: None

Format: lv.max.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.max.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.merge.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.merge.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.min.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.min.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.msubs.h rD,rA,rB

Note: The ORVDX instruction set is not completely specified. This instruction is incorrectly specified in that VMAC is not defined and implementation below does not match description.
32-bit: implementation: N/A
Exceptions: None

Format: lv.muls.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.nand rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.nor rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.or rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.pack.b rD,rA,rB
Exceptions: None

Format: lv.pack.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.packs.b rD,rA,rB
Exceptions: None

Format: lv.packs.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.packus.b rD,rA,rB
Exceptions: None

Format: lv.packus.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.perm.n rD,rA,rB
Exceptions: None

Format: lv.rl.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.rl.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.sll rD,rA,rB

Note: The ORVDX instruction set is not completely specified. This instruction is incorrectly specified in that implementation below does not operate in a vector fashion and no element size is specified in the mnemonic. It may be a remnant of a template or lv.sll.b.
32-bit: implementation: N/A
Exceptions: None

Format: lv.sll.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.sll.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.sra.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.sra.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.srl rD,rA,rB

Note: The ORVDX instruction set is not completely specified. This instruction is incorrectly specified in that implementation below does not operate in a vector fashion and no element size is specified in the mnemonic. It may be a remnant of a template or lv.srl.b.
32-bit: implementation: N/A
Exceptions: None

Format: lv.srl.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.srl.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.sub.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.sub.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.subs.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.subs.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.subu.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.subu.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.subus.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.subus.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.unpack.b rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.unpack.h rD,rA,rB
32-bit: implementation: N/A
Exceptions: None

Format: lv.xor rD,rA,rB
32-bit: implementation: N/A
Exceptions: None


Format: l.add rD,rA,rB
64-bit:: implementation: rD[63:0] <- rA[63:0] + rB[63:0]; SR[CY] <- carry (unsigned overflow); SR[OV] <- signed overflow
Exceptions: Range Exception on overflow if SR[OVE] and AECR[OVADDE] are set; Range Exception on carry if SR[OVE] and AECR[CYADDE] are set.

Format: l.addc rD,rA,rB
64-bit:: implementation: rD[63:0] <- rA[63:0] + rB[63:0] + SR[CY]; SR[CY] <- carry (unsigned overflow); SR[OV] <- overflow
Exceptions: Range Exception on overflow if SR[OVE] and AECR[OVADDE] are set; Range Exception on carry if SR[OVE] and AECR[CYADDE] are set.

Format: l.addi rD,rA,I
64-bit:: implementation: rD[63:0] <- rA[63:0] + exts(Immediate); SR[CY] <- carry (unsigned overflow); SR[OV] <- signed overflow
Exceptions: Range Exception on overflow if SR[OVE] and AECR[OVADDE] are set; Range Exception on carry if SR[OVE] and AECR[CYADDE] are set.

Format: l.addic rD,rA,I
64-bit:: implementation: rD[63:0] <- rA[63:0] + exts(Immediate) + SR[CY]; SR[CY] <- carry (unsigned overflow); SR[OV] <- signed overflow
Exceptions: Range Exception on overflow if SR[OVE] and AECR[OVADDE] are set; Range Exception on carry if SR[OVE] and AECR[CYADDE] are set.

Format: l.and rD,rA,rB
64-bit:: implementation: rD[63:0] <- rA[63:0] AND rB[63:0]
Exceptions: None

Format: l.andi rD,rA,K
64-bit:: implementation: rD[63:0] <- rA[63:0] AND extz(Immediate)
Exceptions: None

Format: l.bf N
64-bit:: implementation: EA <- exts(Immediate << 2) + BranchInsnAddr; PC <- EA if SR[F] set
Exceptions: None

Format: l.bnf N
64-bit:: implementation: EA <- exts(Immediate << 2) + BranchInsnAddr; PC <- EA if SR[F] cleared
Exceptions: None

Format: l.cmov rD,rA,rB
64-bit:: implementation: rD[63:0] <- SR[F] ? rA[63:0] : rB[63:0]
Exceptions: None

Format: l.csync 
64-bit:: implementation: context-synchronization
Exceptions: None

Format: l.cust1 
64-bit:: implementation: N/A
Exceptions: N/A

Format: l.cust2 
64-bit:: implementation: N/A
Exceptions: N/A

Format: l.cust3 
64-bit:: implementation: N/A
Exceptions: N/A

Format: l.cust4 
64-bit:: implementation: N/A
Exceptions: N/A

Format: l.cust5 rD,rA,rB,L,K
64-bit:: implementation: N/A
Exceptions: N/A

Format: l.cust6 
64-bit:: implementation: N/A
Exceptions: N/A

Format: l.cust7 
64-bit:: implementation: N/A
Exceptions: N/A

Format: l.cust8 
64-bit:: implementation: N/A
Exceptions: N/A

Format: l.div rD,rA,rB
64-bit:: implementation: rD[63:0] <- rA[63:0] / rB[63:0]; SR[OV] <- rB[63:0] == 0
Exceptions: Range Exception when divisor is zero if SR[OVE] and AECR[DBZE] are set.

Format: l.divu rD,rA,rB
64-bit:: implementation: rD[63:0] <- rA[63:0] / rB[63:0]; SR[CY] <- rB[63:0] == 0
Exceptions: Range Exception when divisor is zero if SR[OVE] and AECR[DBZE] are set.

Format: l.extbs rD,rA
64-bit:: implementation: rD[63:8] <- rA[7]; rD[7:0] <- rA[7:0]
Exceptions: None

Format: l.extbz rD,rA
64-bit:: implementation: rD[63:8] <- 0; rD[7:0] <- rA[7:0]
Exceptions: None

Format: l.exths rD,rA
64-bit:: implementation: rD[63:16] <- rA[15]; rD[15:0] <- rA[15:0]
Exceptions: None

Format: l.exthz rD,rA
64-bit:: implementation: rD[63:16] <- 0; rD[15:0] <- rA[15:0]
Exceptions: None

Format: l.extws rD,rA
64-bit:: implementation: rD[63:32] <- rA[31]; rD[31:0] <- rA[31:0]
Exceptions: None

Format: l.extwz rD,rA
64-bit:: implementation: rD[63:32] <- 0; rD[31:0] <- rA[31:0]
Exceptions: None

Format: l.ff1 rD,rA,rB
64-bit:: implementation: rD[63:0] <- rA[0] ? 1 : rA[1] ? 2 ... rA[63] ? 64 : 0
Exceptions: None

Format: l.fl1 rD,rA,rB
64-bit:: implementation: rD[63:0] <- rA[63] ? 64 : rA[62] ? 63 ... rA[0] ? 1 : 0
Exceptions: None

Format: l.j N
64-bit:: implementation: PC <- exts(Immediate << 2) + JumpInsnAddr
Exceptions: TLB miss; Page fault; Bus error.

Format: l.jal N
64-bit:: implementation: PC <- exts(Immediate << 2) + JumpInsnAddr; LR <- CPUCFGR[ND] ? JumpInsnAddr + 4 : DelayInsnAddr + 4
Exceptions: TLB miss; Page fault; Bus error.

Format: l.jalr rB
64-bit:: implementation: PC <- rB; LR <- CPUCFGR[ND] ? JumpInsnAddr + 4 : DelayInsnAddr + 4.
Exceptions: Alignment; TLB miss; Page fault; Bus error.

Format: l.jr rB
64-bit:: implementation: PC <- rB
Exceptions: Alignment; TLB miss; Page fault; Bus error.

Format: l.lbs rD,I(rA)
64-bit:: implementation: EA <- exts(Immediate) + rA[63:0]; rD[7:0] <- (EA)[7:0]; rD[63:8] <- (EA)[7]
Exceptions: TLB miss; Page fault; Bus error.

Format: l.lbz rD,I(rA)
64-bit:: implementation: EA <- exts(Immediate) + rA[63:0]; rD[7:0] <- (EA)[7:0]; rD[63:8] <- 0
Exceptions: TLB miss; Page fault; Bus error.

Format: l.ld rD,I(rA)
64-bit:: implementation: EA <- exts(Immediate) + rA[63:0]; rD[63:0] <- (EA)[63:0]
Exceptions: TLB miss; Page fault; Bus error; Alignment

Format: l.lhs rD,I(rA)
64-bit:: implementation: EA <- exts(Immediate) + rA[63:0]; rD[15:0] <- (EA)[15:0]; rD[63:16] <- (EA)[15]
Exceptions: TLB miss; Page fault; Bus error; Alignment

Format: l.lhz rD,I(rA)
64-bit:: implementation: EA <- exts(Immediate) + rA[63:0]; rD[15:0] <- (EA)[15:0]; rD[63:16] <- 0
Exceptions: TLB miss; Page fault; Bus error; Alignment

Format: l.lwa rD,I(rA)
64-bit:: implementation: EA <- exts(Immediate) + rA[63:0]; rD[31:0] <- (EA)[31:0]; rD[63:32] <- 0; atomic_reserve[to_phys(EA)] <- 1
Exceptions: TLB miss; Page fault; Bus error; Alignment

Format: l.lws rD,I(rA)
64-bit:: implementation: EA <- exts(Immediate) + rA[63:0]; rD[31:0] <- (EA)[31:0]; rD[63:32] <- (EA)[31]
Exceptions: TLB miss; Page fault; Bus error; Alignment

Format: l.lwz rD,I(rA)
64-bit:: implementation: EA <- exts(Immediate) + rA[63:0]; rD[31:0] <- (EA)[31:0]; rD[63:32] <- 0
Exceptions: TLB miss; Page fault; Bus error; Alignment

Format: l.mac rA,rB
64-bit:: implementation: MACHI[31:0]MACLO[31:0] <- MACHI[31:0]MACLO[31:0] + rA[63:0] * rB[63:0]; SR[OV] <- signed overflow during addition stage
Exceptions: Range Exception on signed overflow if SR[OVE] and AECR[OVMACADDE] are set.

Format: l.maci rA,I
64-bit:: implementation: MACHI[31:0]MACLO[31:0] <- MACHI[31:0]MACLO[31:0] + rA[63:0] * exts(Immediate); SR[OV] <- signed overflow during addition stage
Exceptions: Range Exception on signed overflow if SR[OVE] and AECR[OVMACADDE] are set.

Format: l.macrc rD
64-bit:: implementation: synchronize-mac; rD[63:0] <- MACHI[31:0]MACLO[31:0]; MACLO[31:0], MACHI[31:0] <- 0
Exceptions: None

Format: l.macu rA,rB
64-bit:: implementation: MACHI[31:0]MACLO[31:0] <- MACHI[31:0]MACLO[31:0] + rA[63:0] * rB[63:0]; SR[CY] <- unsigned overflow during addition stage
Exceptions: Range Exception on unsigned overflow if SR[OVE] and AECR[CYMACADDE] are set.

Format: l.mfspr rD,rA,K
64-bit:: implementation: rD[63:0] <- spr(rA OR Immediate)
Exceptions: None

Format: l.movhi rD,K
64-bit:: implementation: rD[63:0] <- extz(Immediate) << 16
Exceptions: None

Format: l.msb rA,rB
64-bit:: implementation: MACHI[31:0]MACLO[31:0] <- MACHI[31:0]MACLO[31:0] - rA[63:0] * rB[63:0]; SR[OV] <- signed overflow during subtraction stage
Exceptions: Range Exception on signed overflow if SR[OVE] and AECR[OVMACADDE] are set.

Format: l.msbu rA,rB
64-bit:: implementation: MACHI[31:0]MACLO[31:0] <- MACHI[31:0]MACLO[31:0] - rA[63:0] * rB[63:0]; SR[CY] <- unsigned overflow during subtraction stage
Exceptions: Range Exception on signed overflow if SR[OVE] and AECR[CYMACADDE] are set.

Format: l.msync 64-bit:: implementation: Memory-synchronization
Exceptions: None

Format: l.mtspr rA,rB,K
64-bit:: implementation: spr(rA OR Immediate) <- rB[31:0]
Exceptions: None

Format: l.mul rD,rA,rB
64-bit:: implementation: rD[63:0] <- rA[63:0] * rB[63:0]; SR[OV] <- signed overflow
Exceptions: Range Exception on signed overflow if SR[OVE] and AECR[OVMULE] are set.

Format: l.muld rA,rB
64-bit:: implementation: MACHI[31:0]MACLO[31:0] <- rA[63:0] * rB[63:0]; SR[OV] <- signed overflow
Exceptions: Range Exception on signed overflow if SR[OVE] and AECR[OVMULE] are set.

Format: l.muldu rA,rB
64-bit:: implementation: MACHI[31:0]MACLO[31:0] <- rA[63:0] * rB[63:0]; SR[CY] <- unsigned overflow
Exceptions: Range Exception on signed overflow if SR[OVE] and AECR[CYMULE] are set.

Format: l.muli rD,rA,I
64-bit:: implementation: rD[63:0] <- rA[63:0] * exts(Immediate); SR[OV] <- signed overflow
Exceptions: Range Exception on signed overflow if SR[OVE] and AECR[OVMULE] are set.

Format: l.mulu rD,rA,rB
64-bit:: implementation: rD[63:0] <- rA[63:0] * rB[63:0]; SR[CY] <- carry (unsigned overflow)
Exceptions: Range Exception on unsigned overflow if SR[OVE] and AECR[CYMULE] are set.

Format: l.nop K
64-bit:: implementation: N/A
Exceptions: None

Format: l.or rD,rA,rB
64-bit:: implementation: rD[63:0] <- rA[63:0] OR rB[63:0]
Exceptions: None

Format: l.ori rD,rA,K
64-bit:: implementation: rD[63:0] <- rA[63:0] OR extz(Immediate)
Exceptions: None

Format: l.psync 
64-bit:: implementation: pipeline-synchronization
Exceptions: None

Format: l.rfe 
64-bit:: implementation: PC <- EPCR; SR <- ESR
Exceptions: None

Format: l.ror rD,rA,rB
64-bit:: implementation: rD[63-rB[5:0]:0] <- rA[63:rB[5:0]]; rD[63:64-rB[5:0]] <- rA[rB[5:0]-1:0]
Exceptions: None

Format: l.rori rD,rA,L64-bit:: implementation: rD[63-L:0] <- rA[63:L]; rD[63:64-L] <- rA[L-1:0]
Exceptions: None

Format: l.sb I(rA),rB
64-bit:: implementation: EA <- exts(Immediate) + rA[63:0]; (EA)[7:0] <- rB[7:0]
Exceptions: TLB miss; Page fault; Bus error.

Format: l.sd I(rA),rB
64-bit:: implementation: EA <- exts(Immediate) + rA[63:0]; (EA)[63:0] <- rB[63:0]
Exceptions: TLB miss; Page fault; Bus error; Alignment

Format: l.sfeq rA,rB
64-bit:: implementation: SR[F] <- rA[63:0] == rB[63:0]
Exceptions: None

Format: l.sfeqi rA,I
64-bit:: implementation: SR[F] <- rA[63:0] == exts(Immediate)
Exceptions: None

Format: l.sfges rA,rB
64-bit:: implementation: SR[F] <- rA[63:0] >= rB[63:0]
Exceptions: None

Format: l.sfgesi rA,I
64-bit:: implementation: SR[F] <- rA[63:0] >= exts(Immediate)
Exceptions: None

Format: l.sfgeu rA,rB
64-bit:: implementation: SR[F] <- rA[63:0] >= rB[63:0]
Exceptions: None

Format: l.sfgeui rA,I
64-bit:: implementation: SR[F] <- rA[63:0] >= exts(Immediate)
Exceptions: None

Format: l.sfgts rA,rB
64-bit:: implementation: SR[F] <- rA[63:0] > rB[63:0]
Exceptions: None

Format: l.sfgtsi rA,I
64-bit:: implementation: SR[F] <- rA[63:0] > exts(Immediate)
Exceptions: None

Format: l.sfgtu rA,rB
64-bit:: implementation: SR[F] <- rA[63:0] > rB[63:0]
Exceptions: None

Format: l.sfgtui rA,I
64-bit:: implementation: SR[F] <- rA[63:0] > exts(Immediate)
Exceptions: None

Format: l.sfles rA,rB
64-bit:: implementation: SR[F] <- rA[63:0] <= rB[63:0]
Exceptions: None

Format: l.sflesi rA,I
64-bit:: implementation: SR[F] <- rA[63:0] <= exts(Immediate)
Exceptions: None

Format: l.sfleu rA,rB
64-bit:: implementation: SR[F] <- rA[63:0] <= rB[63:0]
Exceptions: None

Format: l.sfleui rA,I
64-bit:: implementation: SR[F] <- rA[63:0] <= exts(Immediate)
Exceptions: None

Format: l.sflts rA,rB
64-bit:: implementation: SR[F] <- rA[63:0] < rB[63:0]
Exceptions: None

Format: l.sfltsi rA,I
64-bit:: implementation: SR[F] <- rA[63:0] < exts(Immediate)
Exceptions: None

Format: l.sfltu rA,rB
64-bit:: implementation: SR[F] <- rA[63:0] < rB[63:0]
Exceptions: None

Format: l.sfltui rA,I
64-bit:: implementation: SR[F] <- rA[63:0] < exts(Immediate)
Exceptions: None

Format: l.sfne rA,rB
64-bit:: implementation: SR[F] <- rA[63:0] != rB[63:0]
Exceptions: None

Format: l.sfnei rA,I
64-bit:: implementation: SR[F] <- rA[63:0] != exts(Immediate)
Exceptions: None

Format: l.sh I(rA),rB
64-bit:: implementation: EA <- exts(Immediate) + rA[63:0]; (EA)[15:0] <- rB[15:0]
Exceptions: TLB miss; Page fault; Bus error; Alignment

Format: l.sll rD,rA,rB
64-bit:: implementation: rD[63:rB[5:0]] <- rA[63-rB[5:0]:0]; rD[rB[5:0]-1:0] <- 0
Exceptions: None

Format: l.slli rD,rA,L
64-bit:: implementation: rD[63:L] <- rA[63-L:0]; rD[L-1:0] <- 0
Exceptions: None

Format: l.sra rD,rA,rB
64-bit:: implementation: rD[63-rB[5:0]:0] <- rA[63:rB[5:0]]; rD[63:64-rB[5:0]] <- rA[63]
Exceptions: None

Format: l.srai rD,rA,L
64-bit:: implementation: rD[63-L:0] <- rA[63:L]; rD[63:64-L] <- rA[63]
Exceptions: None

Format: l.srl rD,rA,rB
64-bit:: implementation: rD[63-rB[5:0]:0] <- rA[63:rB[5:0]]; rD[63:64-rB[5:0]] <- 0
Exceptions: None

Format: l.srli rD,rA,L
64-bit:: implementation: rD[63-L:0] <- rA[63:L]; rD[63:64-L] <- 0
Exceptions: None

Format: l.sub rD,rA,rB
64-bit:: implementation: rD[63:0] <- rA[63:0] - rB[63:0]; SR[CY] <- carry (unsigned overflow); SR[OV] <- signed overflow
Exceptions: Range Exception on overflow if SR[OVE] and AECR[OVADDE] are set; Range Exception on carry if SR[OVE] and AECR[CYADDE] are set.

Format: l.sw I(rA),rB
64-bit:: implementation: EA <- exts(Immediate) + rA[63:0]; (EA)[31:0] <- rB[31:0]
Exceptions: TLB miss; Page fault; Bus error; Alignment

Format: l.swa I(rA),rB
64-bit:: implementation: EA <- exts(Immediate) + rA[63:0]; if (atomic) (EA)[31:0] <- rB[31:0]; SR[F] <- atomic
Exceptions: TLB miss; Page fault; Bus error; Alignment

Format: l.sys K
64-bit:: implementation: system-call-exception(K)
Exceptions: System Call

Format: l.trap K
64-bit:: implementation: trap-exception()
Exceptions: Trap exception

Format: l.xor rD,rA,rB
64-bit:: implementation: rD[63:0] <- rA[63:0] XOR rB[63:0]
Exceptions: None

Format: l.xori rD,rA,I64-bit:: implementation: rD[63:0] <- rA[63:0] XOR exts(Immediate)
Exceptions: None

Format: lf.add.d rD,rA,rB
64-bit:: implementation: rD[63:0] <- rA[63:0] + rB[63:0]
Exceptions: Floating Point

Format: lf.add.s rD,rA,rB
64-bit:: implementation: rD[31:0] <- rA[31:0] + rB[31:0]; rD[63:32] <- 0
Exceptions: Floating Point

Format: lf.cust1.d rA,rB
64-bit:: implementation: N/A
Exceptions: N/A

Format: lf.cust1.s rA,rB
64-bit:: implementation: N/A
Exceptions: N/A

Format: lf.div.d rD,rA,rB
64-bit:: implementation: rD[63:0] <- rA[63:0] / rB[63:0]
Exceptions: Floating Point

Format: lf.div.s rD,rA,rB
64-bit:: implementation: rD[31:0] <- rA[31:0] / rB[31:0]; rD[63:32] <- 0
Exceptions: Floating Point

Format: lf.ftoi.d rD,rA
64-bit:: implementation: rD[63:0] <- ftoi(rA[63:0])
Exceptions: Floating Point

Format: lf.ftoi.s rD,rA
64-bit:: implementation: rD[31:0] <- ftoi(rA[31:0]); rD[63:32] <- 0
Exceptions: Floating Point

Format: lf.itof.d rD,rA
64-bit:: implementation: rD[63:0] <- itof(rA[63:0])
Exceptions: Floating Point

Format: lf.itof.s rD,rA
64-bit:: implementation: rD[31:0] <- itof(rA[31:0]); rD[63:32] <- 0
Exceptions: Floating Point

Format: lf.madd.d rD,rA,rB
64-bit:: implementation: FPMADDHI[31:0]FPMADDLO[31:0] <- rA[63:0] * rB[63:0] + FPMADDHI[31:0]FPMADDLO[31:0]
Exceptions: Floating Point

Format: lf.madd.s rD,rA,rB
64-bit:: implementation: FPMADDHI[31:0]FPMADDLO[31:0] <- rA[31:0] * rB[31:0] + FPMADDHI[31:0]FPMADDLO[31:0]; FPMADDHI <- 0; FPMADDLO <- 0
Exceptions: Floating Point

Format: lf.mul.d rD,rA,rB
64-bit:: implementation: rD[63:0] <- rA[63:0] * rB[63:0]
Exceptions: Floating Point

Format: lf.mul.s rD,rA,rB
64-bit:: implementation: rD[31:0] <- rA[31:0] * rB[31:0]; rD[63:32] <- 0
Exceptions: Floating Point

Format: lf.rem.d rD,rA,rB64-bit:: implementation: rD[63:0] <- rA[63:0] % rB[63:0]
Exceptions: Floating Point

Format: lf.rem.s rD,rA,rB
64-bit:: implementation: rD[31:0] <- rA[31:0] % rB[31:0]; rD[63:32] <- 0
Exceptions: Floating Point

Format: lf.sfeq.d rA,rB
64-bit:: implementation: SR[F] <- rA[63:0] == rB[63:0]
Exceptions: None

Format: lf.sfeq.s rA,rB
64-bit:: implementation: SR[F] <- rA[31:0] == rB[31:0]
Exceptions: None

Format: lf.sfge.d rA,rB
64-bit:: implementation: SR[F] <- rA[63:0] >= rB[63:0]
Exceptions: None

Format: lf.sfge.s rA,rB
64-bit:: implementation: SR[F] <- rA[31:0] >= rB[31:0]
Exceptions: None

Format: lf.sfgt.d rA,rB
64-bit:: implementation: SR[F] <- rA[63:0] > rB[63:0]
Exceptions: None

Format: lf.sfgt.s rA,rB
64-bit:: implementation: SR[F] <- rA[31:0] > rB[31:0]
Exceptions: None

Format: lf.sfle.d rA,rB
64-bit:: implementation: SR[F] <- rA[63:0] <= rB[63:0]
Exceptions: None

Format: lf.sfle.s rA,rB
64-bit:: implementation: SR[F] <- rA[31:0] <= rB[31:0]
Exceptions: None

Format: lf.sflt.d rA,rB
64-bit:: implementation: SR[F] <- rA[63:0] < rB[63:0]
Exceptions: None

Format: lf.sflt.s rA,rB
64-bit:: implementation: SR[F] <- rA[31:0] < rB[31:0]
Exceptions: None

Format: lf.sfne.d rA,rB
64-bit:: implementation: SR[F] <- rA[63:0] != rB[63:0]
Exceptions: None

Format: lf.sfne.s rA,rB
64-bit:: implementation: SR[F] <- rA[31:0] != rB[31:0]
Exceptions: None

Format: lf.sub.d rD,rA,rB
64-bit:: implementation: rD[63:0] <- rA[63:0] - rB[63:0]
Exceptions: Floating Point

Format: lf.sub.s rD,rA,rB
64-bit:: implementation: rD[31:0] <- rA[31:0] - rB[31:0]; rD[63:32] <- 0
Exceptions: Floating Point

Format: lv.add.b rD,rA,rB
64-bit:: implementation: rD[7:0] <- rA[7:0] + rB[7:0]; rD[15:8] <- rA[15:8] + rB[15:8]; rD[23:16] <- rA[23:16] + rB[23:16]; rD[31:24] <- rA[31:24] + rB[31:24]; rD[39:32] <- rA[39:32] + rB[39:32]; rD[47:40] <- rA[47:40] + rB[47:40]; rD[55:48] <- rA[55:48] + rB[55:48]; rD[63:56] <- rA[63:56] + rB[63:56]
Exceptions: None

Format: lv.add.h rD,rA,rB
64-bit:: implementation: rD[15:0] <- rA[15:0] + rB[15:0]; rD[31:16] <- rA[31:16] + rB[31:16]; rD[47:32] <- rA[47:32] + rB[47:32]; rD[63:48] <- rA[63:48] + rB[63:48]
Exceptions: None

Format: lv.adds.b rD,rA,rB
64-bit:: implementation: rD[7:0] <- sat8s(rA[7:0] + rB[7:0]); rD[15:8] <- sat8s(rA[15:8] + rB[15:8]); rD[23:16] <- sat8s(rA[23:16] + rB[23:16]); rD[31:24] <- sat8s(rA[31:24] + rB[31:24]); rD[39:32] <- sat8s(rA[39:32] + rB[39:32]); rD[47:40] <- sat8s(rA[47:40] + rB[47:40]); rD[55:48] <- sat8s(rA[55:48] + rB[55:48]); rD[63:56] <- sat8s(rA[63:56] + rB[63:56])
Exceptions: None

Format: lv.adds.h rD,rA,rB
64-bit:: implementation: rD[15:0] <- sat16s(rA[15:0] + rB[15:0]); rD[31:16] <- sat16s(rA[31:16] + rB[31:16]); rD[47:32] <- sat16s(rA[47:32] + rB[47:32]); rD[63:48] <- sat16s(rA[63:48] + rB[63:48])
Exceptions: None

Format: lv.addu.b rD,rA,rB
64-bit:: implementation: rD[7:0] <- rA[7:0] + rB[7:0]; rD[15:8] <- rA[15:8] + rB[15:8]; rD[23:16] <- rA[23:16] + rB[23:16]; rD[31:24] <- rA[31:24] + rB[31:24]; rD[39:32] <- rA[39:32] + rB[39:32]; rD[47:40] <- rA[47:40] + rB[47:40]; rD[55:48] <- rA[55:48] + rB[55:48]; rD[63:56] <- rA[63:56] + rB[63:56]
Exceptions: None

Format: lv.addu.h rD,rA,rB
64-bit:: implementation: rD[15:0] <- rA[15:0] + rB[15:0]; rD[31:16] <- rA[31:16] + rB[31:16]; rD[47:32] <- rA[47:32] + rB[47:32]; rD[63:48] <- rA[63:48] + rB[63:48]
Exceptions: None

Format: lv.addus.b rD,rA,rB
64-bit:: implementation: rD[7:0] <- sat8u(rA[7:0] + rB[7:0]); rD[15:8] <- sat8u(rA[15:8] + rB[15:8]); rD[23:16] <- sat8u(rA[23:16] + rB[23:16]); rD[31:24] <- sat8u(rA[31:24] + rB[31:24]); rD[39:32] <- sat8u(rA[39:32] + rB[39:32]); rD[47:40] <- sat8u(rA[47:40] + rB[47:40]); rD[55:48] <- sat8u(rA[55:48] + rB[55:48]); rD[63:56] <- sat8u(rA[63:56] + rB[63:56])
Exceptions: None

Format: lv.addus.h rD,rA,rB
64-bit:: implementation: rD[15:0] <- sat16s(rA[15:0] + rB[15:0]); rD[31:16] <- sat16s(rA[31:16] + rB[31:16]); rD[47:32] <- sat16s(rA[47:32] + rB[47:32]); rD[63:48] <- sat16s(rA[63:48] + rB[63:48])
Exceptions: None

Format: lv.all_eq.b rD,rA,rB
64-bit:: implementation: flag <- rA[7:0] == rB[7:0] && rA[15:8] == rB[15:8] && rA[23:16] == rB[23:16] && rA[31:24] == rB[31:24] && rA[39:32] == rB[39:32] && rA[47:40] == rB[47:40] && rA[55:48] == rB[55:48] && rA[63:56] == rB[63:56]; rD[63:0] <- repl(flag)
Exceptions: None

Format: lv.all_eq.h rD,rA,rB
64-bit:: implementation: flag <- rA[15:0] == rB[15:0] && rA[31:16] == rB[31:16] && rA[47:32] == rB[47:32] && rA[63:48] == rB[63:48]; rD[63:0] <- repl(flag)
Exceptions: None

Format: lv.all_ge.b rD,rA,rB
64-bit:: implementation: flag <- rA[7:0] >= rB[7:0] && rA[15:8] >= rB[15:8] && rA[23:16] >= rB[23:16] && rA[31:24] >= rB[31:24] && rA[39:32] >= rB[39:32] && rA[47:40] >= rB[47:40] && rA[55:48] >= rB[55:48] && rA[63:56] >= rB[63:56]; rD[63:0] <- repl(flag)
Exceptions: None

Format: lv.all_ge.h rD,rA,rB
64-bit:: implementation: flag <- rA[15:0] >= rB[15:0] && rA[31:16] >= rB[31:16] && rA[47:32] >= rB[47:32] && rA[63:48] >= rB[63:48]; rD[63:0] <- repl(flag)
Exceptions: None

Format: lv.all_gt.b rD,rA,rB
64-bit:: implementation: flag <- rA[7:0] > rB[7:0] && rA[15:8] > rB[15:8] && rA[23:16] > rB[23:16] && rA[31:24] > rB[31:24] && rA[39:32] > rB[39:32] && rA[47:40] > rB[47:40] && rA[55:48] > rB[55:48] && rA[63:56] > rB[63:56]; rD[63:0] <- repl(flag)
Exceptions: None

Format: lv.all_gt.h rD,rA,rB
64-bit:: implementation: flag <- rA[15:0] > rB[15:0] && rA[31:16] > rB[31:16] && rA[47:32] > rB[47:32] && rA[63:48] > rB[63:48]; rD[63:0] <- repl(flag)
Exceptions: None

Format: lv.all_le.b rD,rA,rB
64-bit:: implementation: flag <- rA[7:0] <= rB[7:0] && rA[15:8] <= rB[15:8] && rA[23:16] <= rB[23:16] && rA[31:24] <= rB[31:24] && rA[39:32] <= rB[39:32] && rA[47:40] <= rB[47:40] && rA[55:48] <= rB[55:48] && rA[63:56] <= rB[63:56]; rD[63:0] <- repl(flag)
Exceptions: None

Format: lv.all_le.h rD,rA,rB
64-bit:: implementation: flag <- rA[15:0] <= rB[15:0] && rA[31:16] <= rB[31:16] && rA[47:32] <= rB[47:32] && rA[63:48] <= rB[63:48]; rD[63:0] <- repl(flag)
Exceptions: None

Format: lv.all_lt.b rD,rA,rB
64-bit:: implementation: flag <- rA[7:0] < rB[7:0] && rA[15:8] < rB[15:8] && rA[23:16] < rB[23:16] && rA[31:24] < rB[31:24] && rA[39:32] < rB[39:32] && rA[47:40] < rB[47:40] && rA[55:48] < rB[55:48] && rA[63:56] < rB[63:56]; rD[63:0] <- repl(flag)
Exceptions: None

Format: lv.all_lt.h rD,rA,rB
64-bit:: implementation: flag <- rA[15:0] < rB[15:0] && rA[31:16] < rB[31:16] && rA[47:32] < rB[47:32] && rA[63:48] < rB[63:48]; rD[63:0] <- repl(flag)
Exceptions: None

Format: lv.all_ne.b rD,rA,rB
64-bit:: implementation: flag <- rA[7:0] != rB[7:0] && rA[15:8] != rB[15:8] && rA[23:16] != rB[23:16] && rA[31:24] != rB[31:24] && rA[39:32] != rB[39:32] && rA[47:40] != rB[47:40] && rA[55:48] != rB[55:48] && rA[63:56] != rB[63:56]; rD[63:0] <- repl(flag)
Exceptions: None

Format: lv.all_ne.h rD,rA,rB
64-bit:: implementation: flag <- rA[15:0] != rB[15:0] && rA[31:16] != rB[31:16] && rA[47:32] != rB[47:32] && rA[63:48] != rB[63:48]; rD[63:0] <- repl(flag)
Exceptions: None

Format: lv.and rD,rA,rB
64-bit:: implementation: rD[63:0] <- rA[63:0] AND rB[63:0]
Exceptions: None

Format: lv.any_eq.b rD,rA,rB
64-bit:: implementation: flag <- rA[7:0] == rB[7:0] || rA[15:8] == rB[15:8] || rA[23:16] == rB[23:16] || rA[31:24] == rB[31:24] || rA[39:32] == rB[39:32] || rA[47:40] == rB[47:40] || rA[55:48] == rB[55:48] || rA[63:56] == rB[63:56]; rD[63:0] <- repl(flag)
Exceptions: None

Format: lv.any_eq.h rD,rA,rB
64-bit:: implementation: flag <- rA[15:0] == rB[15:0] || rA[31:16] == rB[31:16] || rA[47:32] == rB[47:32] || rA[63:48] == rB[63:48]; rD[63:0] <- repl(flag)
Exceptions: None

Format: lv.any_ge.b rD,rA,rB
64-bit:: implementation: flag <- rA[7:0] >= rB[7:0] || rA[15:8] >= rB[15:8] || rA[23:16] >= rB[23:16] || rA[31:24] >= rB[31:24] || rA[39:32] >= rB[39:32] || rA[47:40] >= rB[47:40] || rA[55:48] >= rB[55:48] || rA[63:56] >= rB[63:56]; rD[63:0] <- repl(flag)
Exceptions: None

Format: lv.any_ge.h rD,rA,rB
64-bit:: implementation: flag <- rA[15:0] >= rB[15:0] || rA[31:16] >= rB[31:16] || rA[47:32] >= rB[47:32] || rA[63:48] >= rB[63:48]; rD[63:0] <- repl(flag)
Exceptions: None

Format: lv.any_gt.b rD,rA,rB
64-bit:: implementation: flag <- rA[7:0] > rB[7:0] || rA[15:8] > rB[15:8] || rA[23:16] > rB[23:16] || rA[31:24] > rB[31:24] || rA[39:32] > rB[39:32] || rA[47:40] > rB[47:40] || rA[55:48] > rB[55:48] || rA[63:56] > rB[63:56]; rD[63:0] <- repl(flag)
Exceptions: None

Format: lv.any_gt.h rD,rA,rB
64-bit:: implementation: flag <- rA[15:0] > rB[15:0] || rA[31:16] > rB[31:16] || rA[47:32] > rB[47:32] || rA[63:48] > rB[63:48]; rD[63:0] <- repl(flag)
Exceptions: None

Format: lv.any_le.b rD,rA,rB
64-bit:: implementation: flag <- rA[7:0] <= rB[7:0] || rA[15:8] <= rB[15:8] || rA[23:16] <= rB[23:16] || rA[31:24] <= rB[31:24] || rA[39:32] <= rB[39:32] || rA[47:40] <= rB[47:40] || rA[55:48] <= rB[55:48] || rA[63:56] <= rB[63:56]; rD[63:0] <- repl(flag)
Exceptions: None

Format: lv.any_le.h rD,rA,rB
64-bit:: implementation: flag <- rA[15:0] <= rB[15:0] || rA[31:16] <= rB[31:16] || rA[47:32] <= rB[47:32] || rA[63:48] <= rB[63:48]; rD[63:0] <- repl(flag)
Exceptions: None

Format: lv.any_lt.b rD,rA,rB
64-bit:: implementation: flag <- rA[7:0] < rB[7:0] || rA[15:8] < rB[15:8] || rA[23:16] < rB[23:16] || rA[31:24] < rB[31:24] || rA[39:32] < rB[39:32] || rA[47:40] < rB[47:40] || rA[55:48] < rB[55:48] || rA[63:56] < rB[63:56]; rD[63:0] <- repl(flag)
Exceptions: None

Format: lv.any_lt.h rD,rA,rB
64-bit:: implementation: flag <- rA[15:0] < rB[15:0] || rA[31:16] < rB[31:16] || rA[47:32] < rB[47:32] || rA[63:48] < rB[63:48]; rD[63:0] <- repl(flag)
Exceptions: None

Format: lv.any_ne.b rD,rA,rB
64-bit:: implementation: flag <- rA[7:0] != rB[7:0] || rA[15:8] != rB[15:8] || rA[23:16] != rB[23:16] || rA[31:24] != rB[31:24] || rA[39:32] != rB[39:32] || rA[47:40] != rB[47:40] || rA[55:48] != rB[55:48] || rA[63:56] != rB[63:56]; rD[63:0] <- repl(flag)
Exceptions: None

Format: lv.any_ne.h rD,rA,rB
64-bit:: implementation: flag <- rA[15:0] != rB[15:0] || rA[31:16] != rB[31:16] || rA[47:32] != rB[47:32] || rA[63:48] != rB[63:48]; rD[63:0] <- repl(flag)
Exceptions: None

Format: lv.avg.b rD,rA,rB
64-bit:: implementation: rD[7:0] <- (rA[7:0] + rB[7:0]) >> 1; rD[15:8] <- (rA[15:8] + rB[15:8]) >> 1; rD[23:16] <- (rA[23:16] + rB[23:16]) >> 1; rD[31:24] <- (rA[31:24] + rB[31:24]) >> 1; rD[39:32] <- (rA[39:32] + rB[39:32]) >> 1; rD[47:40] <- (rA[47:40] + rB[47:40]) >> 1; rD[55:48] <- (rA[55:48] + rB[55:48]) >> 1; rD[63:56] <- (rA[63:56] + rB[63:56]) >> 1
Exceptions: None

Format: lv.avg.h rD,rA,rB
64-bit:: implementation: rD[15:0] <- (rA[15:0] + rB[15:0]) >> 1; rD[31:16] <- (rA[31:16] + rB[31:16]) >> 1; rD[47:32] <- (rA[47:32] + rB[47:32]) >> 1; rD[63:48] <- (rA[63:48] + rB[63:48]) >> 1
Exceptions: None

Format: lv.cmp_eq.b rD,rA,rB
64-bit:: implementation: rD[7:0] <- repl(rA[7:0] == rB[7:0]); rD[15:8] <- repl(rA[15:8] == rB[15:8]); rD[23:16] <- repl(rA[23:16] == rB[23:16]); rD[31:24] <- repl(rA[31:24] == rB[31:24]); rD[39:32] <- repl(rA[39:32] == rB[39:32]); rD[47:40] <- repl(rA[47:40] == rB[47:40]); rD[55:48] <- repl(rA[55:48] == rB[55:48]); rD[63:56] <- repl(rA[63:56] == rB[63:56])
Exceptions: None

Format: lv.cmp_eq.h rD,rA,rB
64-bit:: implementation: rD[15:0] <- repl(rA[15:0] == rB[15:0]); rD[31:16] <- repl(rA[31:16] == rB[31:16]); rD[47:32] <- repl(rA[47:32] == rB[47:32]); rD[63:48] <- repl(rA[63:48] == rB[63:48])
Exceptions: None

Format: lv.cmp_ge.b rD,rA,rB
64-bit:: implementation: rD[7:0] <- repl(rA[7:0] >= rB[7:0]); rD[15:8] <- repl(rA[15:8] >= rB[15:8]); rD[23:16] <- repl(rA[23:16] >= rB[23:16]); rD[31:24] <- repl(rA[31:24] >= rB[31:24]); rD[39:32] <- repl(rA[39:32] >= rB[39:32]); rD[47:40] <- repl(rA[47:40] >= rB[47:40]); rD[55:48] <- repl(rA[55:48] >= rB[55:48]); rD[63:56] <- repl(rA[63:56] >= rB[63:56])
Exceptions: None

Format: lv.cmp_ge.h rD,rA,rB
64-bit:: implementation: rD[15:0] <- repl(rA[15:0] >= rB[15:0]); rD[31:16] <- repl(rA[31:16] >= rB[31:16]); rD[47:32] <- repl(rA[47:32] >= rB[47:32]); rD[63:48] <- repl(rA[63:48] >= rB[63:48])
Exceptions: None

Format: lv.cmp_gt.b rD,rA,rB
64-bit:: implementation: rD[7:0] <- repl(rA[7:0] > rB[7:0]); rD[15:8] <- repl(rA[15:8] > rB[15:8]); rD[23:16] <- repl(rA[23:16] > rB[23:16]); rD[31:24] <- repl(rA[31:24] > rB[31:24]); rD[39:32] <- repl(rA[39:32] > rB[39:32]); rD[47:40] <- repl(rA[47:40] > rB[47:40]); rD[55:48] <- repl(rA[55:48] > rB[55:48]); rD[63:56] <- repl(rA[63:56] > rB[63:56])
Exceptions: None

Format: lv.cmp_gt.h rD,rA,rB
64-bit:: implementation: rD[15:0] <- repl(rA[15:0] > rB[15:0]); rD[31:16] <- repl(rA[31:16] > rB[31:16]); rD[47:32] <- repl(rA[47:32] > rB[47:32]); rD[63:48] <- repl(rA[63:48] > rB[63:48])
Exceptions: None

Format: lv.cmp_le.b rD,rA,rB
64-bit:: implementation: rD[7:0] <- repl(rA[7:0] <= rB[7:0]); rD[15:8] <- repl(rA[15:8] <= rB[15:8]); rD[23:16] <- repl(rA[23:16] <= rB[23:16]); rD[31:24] <- repl(rA[31:24] <= rB[31:24]); rD[39:32] <- repl(rA[39:32] <= rB[39:32]); rD[47:40] <- repl(rA[47:40] <= rB[47:40]); rD[55:48] <- repl(rA[55:48] <= rB[55:48]); rD[63:56] <- repl(rA[63:56] <= rB[63:56])
Exceptions: None

Format: lv.cmp_le.h rD,rA,rB
64-bit:: implementation: rD[15:0] <- repl(rA[15:0] <= rB[15:0]); rD[31:16] <- repl(rA[31:16] <= rB[31:16]); rD[47:32] <- repl(rA[47:32] <= rB[47:32]); rD[63:48] <- repl(rA[63:48] <= rB[63:48])
Exceptions: None

Format: lv.cmp_lt.b rD,rA,rB
64-bit:: implementation: rD[7:0] <- repl(rA[7:0] <= rB[7:0]); rD[15:8] <- repl(rA[15:8] <= rB[15:8]); rD[23:16] <- repl(rA[23:16] <= rB[23:16]); rD[31:24] <- repl(rA[31:24] <= rB[31:24]); rD[39:32] <- repl(rA[39:32] <= rB[39:32]); rD[47:40] <- repl(rA[47:40] <= rB[47:40]); rD[55:48] <- repl(rA[55:48] <= rB[55:48]); rD[63:56] <- repl(rA[63:56] <= rB[63:56])
Exceptions: None

Format: lv.cmp_lt.h rD,rA,rB
64-bit:: implementation: rD[15:0] <- repl(rA[15:0] <= rB[15:0]); rD[31:16] <- repl(rA[31:16] <= rB[31:16]); rD[47:32] <- repl(rA[47:32] <= rB[47:32]); rD[63:48] <- repl(rA[63:48] <= rB[63:48])
Exceptions: None

Format: lv.cmp_ne.b rD,rA,rB
64-bit:: implementation: rD[7:0] <- repl(rA[7:0] != rB[7:0]); rD[15:8] <- repl(rA[15:8] != rB[15:8]); rD[23:16] <- repl(rA[23:16] != rB[23:16]); rD[31:24] <- repl(rA[31:24] != rB[31:24]); rD[39:32] <- repl(rA[39:32] != rB[39:32]); rD[47:40] <- repl(rA[47:40] != rB[47:40]); rD[55:48] <- repl(rA[55:48] != rB[55:48]); rD[63:56] <- repl(rA[63:56] != rB[63:56])
Exceptions: None

Format: lv.cmp_ne.h rD,rA,rB
64-bit:: implementation: rD[15:0] <- repl(rA[15:0] != rB[15:0]); rD[31:16] <- repl(rA[31:16] != rB[31:16]); rD[47:32] <- repl(rA[47:32] != rB[47:32]); rD[63:48] <- repl(rA[63:48] != rB[63:48])
Exceptions: None

Format: lv.cust1 
64-bit:: implementation: N/A
Exceptions: N/A

Format: lv.cust2 
64-bit:: implementation: N/A
Exceptions: N/A

Format: lv.cust3 
64-bit:: implementation: N/A
Exceptions: N/A

Format: lv.cust4 
64-bit:: implementation: N/A
Exceptions: N/A

Format: lv.madds.h rD,rA,rB

Note: The ORVDX instruction set is not completely specified. This instruction is incorrectly specified in that VMAC is not defined and implementation below does not match description.64-bit:: implementation: rD[15:0] <- sat32s(rA[15:0] * rB[15:0] + VMACLO[31:0]); rD[31:16] <- sat32s(rA[31:16] * rB[31:16] + VMACLO[63:32]); rD[47:32] <- sat32s(rA[47:32] * rB[47:32] + VMACHI[31:0]); rD[63:48] <- sat32s(rA[63:48] * rB[63:48] + VMACHI[63:32])
Exceptions: None

Format: lv.max.b rD,rA,rB
64-bit:: implementation: rD[7:0] <- rA[7:0] > rB[7:0] ? rA[7:0] : rB[7:0]; rD[15:8] <- rA[15:8] > rB[15:8] ? rA[15:8] : rB[15:8]; rD[23:16] <- rA[23:16] > rB[23:16] ? rA[23:16] : rB[23:16]; rD[31:24] <- rA[31:24] > rB[31:24] ? rA[31:24] : rB[31:24]; rD[39:32] <- rA[39:32] > rB[39:32] ? rA[39:32] : rB[39:32]; rD[47:40] <- rA[47:40] > rB[47:40] ? rA[47:40] : rB[47:40]; rD[55:48] <- rA[55:48] > rB[55:48] ? rA[55:48] : rB[55:48]; rD[63:56] <- rA[63:56] > rB[63:56] ? rA[63:56] : rB[63:56]
Exceptions: None

Format: lv.max.h rD,rA,rB
64-bit:: implementation: rD[15:0] <- rA[15:0] > rB[15:0] ? rA[15:0] : rB[15:0]; rD[31:16] <- rA[31:16] > rB[31:16] ? rA[31:16] : rB[31:16]; rD[47:32] <- rA[47:32] > rB[47:32] ? rA[47:32] : rB[47:32]; rD[63:48] <- rA[63:48] > rB[63:48] ? rA[63:48] : rB[63:48]
Exceptions: None

Format: lv.merge.b rD,rA,rB
64-bit:: implementation: rD[7:0] <- rB[7:0]; rD[15:8] <- rA[15:8]; rD[23:16] <- rB[23:16]; rD[31:24] <- rA[31:24]; rD[39:32] <- rB[39:32]; rD[47:40] <- rA[47:40]; rD[55:48] <- rB[55:48]; rD[63:56] <- rA[63:56]
Exceptions: None

Format: lv.merge.h rD,rA,rB
64-bit:: implementation: rD[15:0] <- rB[15:0]; rD[31:16] <- rA[31:16]; rD[47:32] <- rB[47:32]; rD[63:48] <- rA[63:48]
Exceptions: None

Format: lv.min.b rD,rA,rB
64-bit:: implementation: rD[7:0] <- rA[7:0] < rB[7:0] ? rA[7:0] : rB[7:0]; rD[15:8] <- rA[15:8] < rB[15:8] ? rA[15:8] : rB[15:8]; rD[23:16] <- rA[23:16] < rB[23:16] ? rA[23:16] : rB[23:16]; rD[31:24] <- rA[31:24] < rB[31:24] ? rA[31:24] : rB[31:24]; rD[39:32] <- rA[39:32] < rB[39:32] ? rA[39:32] : rB[39:32]; rD[47:40] <- rA[47:40] < rB[47:40] ? rA[47:40] : rB[47:40]; rD[55:48] <- rA[55:48] < rB[55:48] ? rA[55:48] : rB[55:48]; rD[63:56] <- rA[63:56] < rB[63:56] ? rA[63:56] : rB[63:56]
Exceptions: None

Format: lv.min.h rD,rA,rB
64-bit:: implementation: rD[15:0] <- rA[15:0] < rB[15:0] ? rA[15:0] : rB[15:0]; rD[31:16] <- rA[31:16] < rB[31:16] ? rA[31:16] : rB[31:16]; rD[47:32] <- rA[47:32] < rB[47:32] ? rA[47:32] : rB[47:32]; rD[63:48] <- rA[63:48] < rB[63:48] ? rA[63:48] : rB[63:48]
Exceptions: None

Format: lv.msubs.h rD,rA,rB

Note: The ORVDX instruction set is not completely specified. This instruction is incorrectly specified in that VMAC is not defined and implementation below does not match description.64-bit:: implementation: rD[15:0] <- sat32s(VMACLO[31:0] - rA[15:0] * rB[15:0]); rD[31:16] <- sat32s(VMACLO[63:32] - rA[31:16] * rB[31:16]); rD[47:32] <- sat32s(VMACHI[31:0] - rA[47:32] * rB[47:32]); rD[63:48] <- sat32s(VMACHI[63:32] - rA[63:48] * rB[63:48])
Exceptions: None

Format: lv.muls.h rD,rA,rB
64-bit:: implementation: rD[15:0] <- sat16s(rA[15:0] * rB[15:0]); rD[31:16] <- sat16s(rA[31:16] * rB[31:16]); rD[47:32] <- sat16s(rA[47:32] * rB[47:32]); rD[63:48] <- sat16s(rA[63:48] * rB[63:48])
Exceptions: None

Format: lv.nand rD,rA,rB
64-bit:: implementation: rD[63:0] <- rA[63:0] NAND rB[63:0]
Exceptions: None

Format: lv.nor rD,rA,rB
64-bit:: implementation: rD[63:0] <- rA[63:0] NOR rB[63:0]
Exceptions: None

Format: lv.or rD,rA,rB
64-bit:: implementation: rD[63:0] <- rA[63:0] OR rB[63:0]
Exceptions: None

Format: lv.pack.b rD,rA,rB64-bit:: implementation: rD[3:0] <- rB[3:0]; rD[7:4] <- rB[11:8]; rD[11:8] <- rB[19:16]; rD[15:12] <- rB[27:24]; rD[19:16] <- rB[35:32]; rD[23:20] <- rB[43:40]; rD[27:24] <- rB[51:48]; rD[31:28] <- rB[59:56]; rD[35:32] <- rA[3:0]; rD[39:36] <- rA[11:8]; rD[43:40] <- rA[19:16]; rD[47:44] <- rA[27:24]; rD[51:48] <- rA[35:32]; rD[55:52] <- rA[43:40]; rD[59:56] <- rA[51:48]; rD[63:60] <- rA[59:56]
Exceptions: None

Format: lv.pack.h rD,rA,rB
64-bit:: implementation: rD[7:0] <- rB[7:0]; rD[15:8] <- rB[23:16]; rD[23:16] <- rB[39:32]; rD[31:24] <- rB[55:48]; rD[39:32] <- rA[7:0]; rD[47:40] <- rA[23:16]; rD[55:48] <- rA[39:32]; rD[63:56] <- rA[55:48]
Exceptions: None

Format: lv.packs.b rD,rA,rB64-bit:: implementation: rD[3:0] <- sat4s(rB[7:0]); rD[7:4] <- sat4s(rB[15:8]); rD[11:8] <- sat4s(rB[23:16]); rD[15:12] <- sat4s(rB[31:24]); rD[19:16] <- sat4s(rB[39:32]); rD[23:20] <- sat4s(rB[47:40]); rD[27:24] <- sat4s(rB[55:48]); rD[31:28] <- sat4s(rB[63:56]); rD[35:32] <- sat4s(rA[7:0]); rD[39:36] <- sat4s(rA[15:8]); rD[43:40] <- sat4s(rA[23:16]); rD[47:44] <- sat4s(rA[31:24]); rD[51:48] <- sat4s(rA[39:32]); rD[55:52] <- sat4s(rA[47:40]); rD[59:56] <- sat4s(rA[55:48]); rD[63:60] <- sat4s(rA[63:56])
Exceptions: None

Format: lv.packs.h rD,rA,rB
64-bit:: implementation: rD[7:0] <- sat8s(rB[15:0]); rD[15:8] <- sat8s(rB[31:16]); rD[23:16] <- sat8s(rB[47:32]); rD[31:24] <- sat8s(rB[63:48]); rD[39:32] <- sat8s(rA[15:0]); rD[47:40] <- sat8s(rA[31:16]); rD[55:48] <- sat8s(rA[47:32]); rD[63:56] <- sat8s(rA[63:48])
Exceptions: None

Format: lv.packus.b rD,rA,rB64-bit:: implementation: rD[3:0] <- sat4u(rB[7:0]); rD[7:4] <- sat4u(rB[15:8]); rD[11:8] <- sat4u(rB[23:16]); rD[15:12] <- sat4u(rB[31:24]); rD[19:16] <- sat4u(rB[39:32]); rD[23:20] <- sat4u(rB[47:40]); rD[27:24] <- sat4u(rB[55:48]); rD[31:28] <- sat4u(rB[63:56]); rD[35:32] <- sat4u(rA[7:0]); rD[39:36] <- sat4u(rA[15:8]); rD[43:40] <- sat4u(rA[23:16]); rD[47:44] <- sat4u(rA[31:24]); rD[51:48] <- sat4u(rA[39:32]); rD[55:52] <- sat4u(rA[47:40]); rD[59:56] <- sat4u(rA[55:48]); rD[63:60] <- sat4u(rA[63:56])
Exceptions: None

Format: lv.packus.h rD,rA,rB
64-bit:: implementation: rD[7:0] <- sat8u(rB[15:0]); rD[15:8] <- sat8u(rB[31:16]); rD[23:16] <- sat8u(rB[47:32]); rD[31:24] <- sat8u(rB[63:48]); rD[39:32] <- sat8u(rA[15:0]); rD[47:40] <- sat8u(rA[31:16]); rD[55:48] <- sat8u(rA[47:32]); rD[63:56] <- sat8u(rA[63:48])
Exceptions: None

Format: lv.perm.n rD,rA,rB64-bit:: implementation: rD[3:0] <- rA[rB[3:0]*4+3:rB[3:0]*4]; rD[7:4] <- rA[rB[7:4]*4+3:rB[7:4]*4]; rD[11:8] <- rA[rB[11:8]*4+3:rB[11:8]*4]; rD[15:12] <- rA[rB[15:12]*4+3:rB[15:12]*4]; rD[19:16] <- rA[rB[19:16]*4+3:rB[19:16]*4]; rD[23:20] <- rA[rB[23:20]*4+3:rB[23:20]*4]; rD[27:24] <- rA[rB[27:24]*4+3:rB[27:24]*4]; rD[31:28] <- rA[rB[31:28]*4+3:rB[31:28]*4]; rD[35:32] <- rA[rB[35:32]*4+3:rB[35:32]*4]; rD[39:36] <- rA[rB[39:36]*4+3:rB[39:36]*4]; rD[43:40] <- rA[rB[43:40]*4+3:rB[43:40]*4]; rD[47:44] <- rA[rB[47:44]*4+3:rB[47:44]*4]; rD[51:48] <- rA[rB[51:48]*4+3:rB[51:48]*4]; rD[55:52] <- rA[rB[55:52]*4+3:rB[55:52]*4]; rD[59:56] <- rA[rB[59:56]*4+3:rB[59:56]*4]; rD[63:60] <- rA[rB[63:60]*4+3:rB[63:60]*4]
Exceptions: None

Format: lv.rl.b rD,rA,rB
64-bit:: implementation: rD[7:0] <- rA[7:0] rl rB[2:0]; rD[15:8] <- rA[15:8] rl rB[10:8]; rD[23:16] <- rA[23:16] rl rB[18:16]; rD[31:24] <- rA[31:24] rl rB[26:24]; rD[39:32] <- rA[39:32] rl rB[34:32]; rD[47:40] <- rA[47:40] rl rB[42:40]; rD[55:48] <- rA[55:48] rl rB[50:48]; rD[63:56] <- rA[63:56] rl rB[58:56]
Exceptions: None

Format: lv.rl.h rD,rA,rB
64-bit:: implementation: rD[15:0] <- rA[15:0] rl rB[3:0]; rD[31:16] <- rA[31:16] rl rB[19:16]; rD[47:32] <- rA[47:32] rl rB[35:32]; rD[63:48] <- rA[63:48] rl rB[51:48]
Exceptions: None

Format: lv.sll rD,rA,rB

Note: The ORVDX instruction set is not completely specified. This instruction is incorrectly specified in that implementation below does not operate in a vector fashion and no element size is specified in the mnemonic. It may be a remnant of a template or lv.sll.b.64-bit:: implementation: rD[63:0] <- rA[63:0] << rB[2:0]
Exceptions: None

Format: lv.sll.b rD,rA,rB
64-bit:: implementation: rD[7:0] <- rA[7:0] << rB[2:0]; rD[15:8] <- rA[15:8] << rB[10:8]; rD[23:16] <- rA[23:16] << rB[18:16]; rD[31:24] <- rA[31:24] << rB[26:24]; rD[39:32] <- rA[39:32] << rB[34:32]; rD[47:40] <- rA[47:40] << rB[42:40]; rD[55:48] <- rA[55:48] << rB[50:48]; rD[63:56] <- rA[63:56] << rB[58:56]
Exceptions: None

Format: lv.sll.h rD,rA,rB
64-bit:: implementation: rD[15:0] <- rA[15:0] << rB[3:0]; rD[31:16] <- rA[31:16] << rB[19:16]; rD[47:32] <- rA[47:32] << rB[35:32]; rD[63:48] <- rA[63:48] << rB[51:48]
Exceptions: None

Format: lv.sra.b rD,rA,rB
64-bit:: implementation: rD[7:0] <- rA[7:0] sra rB[2:0]; rD[15:8] <- rA[15:8] sra rB[10:8]; rD[23:16] <- rA[23:16] sra rB[18:16]; rD[31:24] <- rA[31:24] sra rB[26:24]; rD[39:32] <- rA[39:32] sra rB[34:32]; rD[47:40] <- rA[47:40] sra rB[42:40]; rD[55:48] <- rA[55:48] sra rB[50:48]; rD[63:56] <- rA[63:56] sra rB[58:56]
Exceptions: None

Format: lv.sra.h rD,rA,rB
64-bit:: implementation: rD[15:0] <- rA[15:0] sra rB[3:0]; rD[31:16] <- rA[31:16] sra rB[19:16]; rD[47:32] <- rA[47:32] sra rB[35:32]; rD[63:48] <- rA[63:48] sra rB[51:48]
Exceptions: None

Format: lv.srl rD,rA,rB

Note: The ORVDX instruction set is not completely specified. This instruction is incorrectly specified in that implementation below does not operate in a vector fashion and no element size is specified in the mnemonic. It may be a remnant of a template or lv.srl.b.64-bit:: implementation: rD[63:0] <- rA[63:0] >> rB[2:0]
Exceptions: None

Format: lv.srl.b rD,rA,rB
64-bit:: implementation: rD[7:0] <- rA[7:0] >> rB[2:0]; rD[15:8] <- rA[15:8] >> rB[10:8]; rD[23:16] <- rA[23:16] >> rB[18:16]; rD[31:24] <- rA[31:24] >> rB[26:24]; rD[39:32] <- rA[39:32] >> rB[34:32]; rD[47:40] <- rA[47:40] >> rB[42:40]; rD[55:48] <- rA[55:48] >> rB[50:48]; rD[63:56] <- rA[63:56] >> rB[58:56]
Exceptions: None

Format: lv.srl.h rD,rA,rB
64-bit:: implementation: rD[15:0] <- rA[15:0] >> rB[3:0]; rD[31:16] <- rA[31:16] >> rB[19:16]; rD[47:32] <- rA[47:32] >> rB[35:32]; rD[63:48] <- rA[63:48] >> rB[51:48]
Exceptions: None

Format: lv.sub.b rD,rA,rB64-bit:: implementation: rD[7:0] <- rA[7:0] - rB[7:0]; rD[15:8] <- rA[15:8] - rB[15:8]; rD[23:16] <- rA[23:16] - rB[23:16]; rD[31:24] <- rA[31:24] - rB[31:24]; rD[39:32] <- rA[39:32] - rB[39:32]; rD[47:40] <- rA[47:40] - rB[47:40]; rD[55:48] <- rA[55:48] - rB[55:48]; rD[63:56] <- rA[63:56] - rB[63:56]
Exceptions: None

Format: lv.sub.h rD,rA,rB
64-bit:: implementation: rD[15:0] <- rA[15:0] - rB[15:0]; rD[31:16] <- rA[31:16] - rB[31:16]; rD[47:32] <- rA[47:32] - rB[47:32]; rD[63:48] <- rA[63:48] - rB[63:48]
Exceptions: None

Format: lv.subs.b rD,rA,rB
64-bit:: implementation: rD[7:0] <- sat8s(rA[7:0] - rB[7:0]); rD[15:8] <- sat8s(rA[15:8] - rB[15:8]); rD[23:16] <- sat8s(rA[23:16] - rB[23:16]); rD[31:24] <- sat8s(rA[31:24] - rB[31:24]); rD[39:32] <- sat8s(rA[39:32] - rB[39:32]); rD[47:40] <- sat8s(rA[47:40] - rB[47:40]); rD[55:48] <- sat8s(rA[55:48] - rB[55:48]); rD[63:56] <- sat8s(rA[63:56] - rB[63:56])
Exceptions: None

Format: lv.subs.h rD,rA,rB
64-bit:: implementation: rD[15:0] <- sat16s(rA[15:0] - rB[15:0]); rD[31:16] <- sat16s(rA[31:16] - rB[31:16]); rD[47:32] <- sat16s(rA[47:32] - rB[47:32]); rD[63:48] <- sat16s(rA[63:48] - rB[63:48])
Exceptions: None

Format: lv.subu.b rD,rA,rB
64-bit:: implementation: rD[7:0] <- rA[7:0] - rB[7:0]; rD[15:8] <- rA[15:8] - rB[15:8]; rD[23:16] <- rA[23:16] - rB[23:16]; rD[31:24] <- rA[31:24] - rB[31:24]; rD[39:32] <- rA[39:32] - rB[39:32]; rD[47:40] <- rA[47:40] - rB[47:40]; rD[55:48] <- rA[55:48] - rB[55:48]; rD[63:56] <- rA[63:56] - rB[63:56]
Exceptions: None

Format: lv.subu.h rD,rA,rB
64-bit:: implementation: rD[15:0] <- rA[15:0] - rB[15:0]; rD[31:16] <- rA[31:16] - rB[31:16]; rD[47:32] <- rA[47:32] - rB[47:32]; rD[63:48] <- rA[63:48] - rB[63:48]
Exceptions: None

Format: lv.subus.b rD,rA,rB
64-bit:: implementation: rD[7:0] <- sat8u(rA[7:0] - rB[7:0]); rD[15:8] <- sat8u(rA[15:8] - rB[15:8]); rD[23:16] <- sat8u(rA[23:16] - rB[23:16]); rD[31:24] <- sat8u(rA[31:24] - rB[31:24]); rD[39:32] <- sat8u(rA[39:32] - rB[39:32]); rD[47:40] <- sat8u(rA[47:40] - rB[47:40]); rD[55:48] <- sat8u(rA[55:48] - rB[55:48]); rD[63:56] <- sat8u(rA[63:56] - rB[63:56])
Exceptions: None

Format: lv.subus.h rD,rA,rB
64-bit:: implementation: rD[15:0] <- sat16u(rA[15:0] - rB[15:0]); rD[31:16] <- sat16u(rA[31:16] - rB[31:16]); rD[47:32] <- sat16u(rA[47:32] - rB[47:32]); rD[63:48] <- sat16u(rA[63:48] - rB[63:48])
Exceptions: None

Format: lv.unpack.b rD,rA,rB
64-bit:: implementation: rD[7:0] <- exts(rA[3:0]); rD[15:8] <- exts(rA[7:4]); rD[23:16] <- exts(rA[11:8]); rD[31:24] <- exts(rA[15:12]); rD[39:32] <- exts(rA[19:16]); rD[47:40] <- exts(rA[23:20]); rD[55:48] <- exts(rA[27:24]); rD[63:56] <- exts(rA[31:28])
Exceptions: None

Format: lv.unpack.h rD,rA,rB
64-bit:: implementation: rD[15:0] <- exts(rA[7:0]); rD[31:16] <- exts(rA[15:8]); rD[47:32] <- exts(rA[23:16]); rD[63:48] <- exts(rA[31:24])
Exceptions: None

Format: lv.xor rD,rA,rB
64-bit:: implementation: rD[63:0] <- rA[63:0] XOR rB[63:0]
Exceptions: None
