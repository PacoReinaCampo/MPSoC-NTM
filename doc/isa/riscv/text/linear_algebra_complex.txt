linear algebra operators
"*"
  -> purpose: matrix multiply, overloaded for the following:
  -> description: complex_matrix * complex_matrix
  -> input: complex_matrix, complex_matrix
  -> output: complex_matrix
  -> requirement: number of columns in left matrix must match number of rows in right matrix. returns a matrix which is (left row length by right column length).

  -> description: complex_matrix * complex_vector
  -> input: complex_matrix, complex_vector
  -> output: complex_matrix
  -> requirement: matrix must have one column, number of rows must match length of vector. returns a matrix which is square (vector length by vector length).

  -> description: complex_vector * complex_matrix
  -> input: complex_vector, complex_matrix
  -> output: complex_vector
  -> requirement: matrix must have same number of rows as length of vector. returned vector will be number of columns in matrix.

  -> description: complex_matrix * complex
  -> input: complex_matrix, complex
  -> output: complex_matrix

  -> description: complex * complex_matrix
  -> input: complex, complex_matrix
  -> output: complex_matrix

  -> description: complex_vector * complex
  -> input: complex_vector, complex
  -> output: complex_vector

  -> description: complex * complex_vector
  -> input: complex, complex_vector
  -> output: complex_vector

"+"
  -> purpose: matrix addition, overloaded for the following:
  -> description: complex_matrix + complex_matrix
  -> input: complex_matrix + complex_matrix
  -> output: complex_matrix
  -> requirement: dimensions must match.

  -> description: complex_vector + complex_vector
  -> input: complex_vector + complex_vector
  -> output: complex_vector
  -> requirement: dimensions must match.

"-"
  -> purpose: matrix subtraction, overloaded as follows:
  -> description: complex_matrix - complex_matrix
  -> input: complex_matrix - complex_matrix
  -> output: complex_matrix
  -> requirement: dimensions must match

  -> description: complex_vector - complex_vector
  -> input: complex_vector, complex_vector
  -> output: complex_vector
  -> requirement: dimensions must match unary minus (complex_matrix).

"/"
  -> purpose: matrix division
  -> description: complex_matrix / complex_matrix (complex_matrix * inv(complex_matrix))
  -> input: complex_matrix, complex_matrix
  -> output: complex_matrix
  -> requirement: matrix must be square for this function to work.

  -> description: complex_matrix / complex
  -> input: complex_matrix, complex
  -> output: complex_matrix

  -> description: complex_vector / complex
  -> input: complex_vector, complex
  -> output: complex_vector

"**"
  -> description: complex_matrix ** integer
  -> input: complex_matrix, integer
  -> output: complex_matrix
  -> requirement: matrix must be square for this function to work.

"="
  -> description: complex_vector = complex_matrix
  -> input: complex_vector, complex_matrix
  -> requirement: true if the matrix has one row and equal to the vector.

  -> description: complex_matrix = complex_vector
  -> input: complex_matrix, complex_vector

  -> description: complex_vector /= complex_matrix
  -> input: complex_vector, complex_matrix

  -> description: complex_matrix /= complex_vector
  -> input: complex_matrix, complex_vector

"abs"
  -> purpose: the absolute value
  -> input: complex_matrix, complex_vector


linear algebra functions
times
  -> purpose: .*
  -> requirement: element by element multiply

rdivide
  -> purpose: ./
  -> requirement: element by element divide

mrdivide(l, r)
  -> purpose: l * inv(r)

mldivide(l, r)
  -> purpose: inv(l) * r

pow(l, r)
  -> purpose: .^
  -> requirement: element by element l**r

sqrt
  -> purpose: square root function
  -> requirement: element by element

exp
  -> purpose: exponential function
  -> requirement: element by element

log
  -> purpose: natural logarithm function
  -> requirement: element by element

trace
  -> purpose: sum the diagonal of a matrix

sum(vector)
  -> purpose: returns the arithmetic sum of the input vector

sum(matrix, dim)
  -> purpose: returns the sum of a matrix along a given dimension
  -> input: dim = 1, sum along the y axis; dim = 2, sum along the x axis

prod(vector)
  -> purpose: returns the arithmetic multiplication of the input vector

prod(matrix, dim)
  -> purpose: returns the arithmetic multiplication of the input along a given dimension
  -> input: dim = 1, multiply along the y axis; dim = 2, multiply along the x axis

dot
  -> purpose: returns the dot product of two vectors

cross
  -> purpose: returns the cross product of two vectors (or matrices)

kron
  -> purpose: returns the kronecker product of two matrices

det
  -> purpose: returns the determinant of a matrix

inv
  -> purpose: inverts a matrix

linsolve(matrix, vector)
  -> purpose: solves a linear equation

normalize(matrix, rval)
  -> purpose: normalizes a matrix to the value "rval" (which defaults to 1.0)

polyval
  -> purpose: evaluates a polynomial


matrix manipulation functions
isempty
  -> purpose: returns true if the matrix or vector is null

transpose
  -> purpose: transposes a matrix

repmat(val, rows, columns)
  -> purpose: creates a matrix by replicating a single value

zeros(rows, columns)
  -> purpose: returns a matrix of zeros

ones(rows, columns)
  -> purpose: returns a matrix of ones.

eye(rows, columns)
  -> purpose: returns an identity matrix

rand(rows, columns)
  -> purpose: returns a matrix of random numbers

cat(dim, l, r)
  -> purpose: concatenates two matrices along dimension "dim"

horzcat(l, r)
  -> purpose: concatenates two matrices horizontally

vertcat(l, r)
  -> purpose: concatenates two matrices vertically

flipdim(arg, dim)
  -> purpose: flips a matrix along a given dimension

fliplr
  -> purpose: flip a matrix left to right

flipup
  -> purpose: flip a matrix top to bottom

rot90(arg, dim)
  -> purpose: rotates a matrix 90 degrees (or more depending on "dim")

reshape(arg, rows, columns)
  -> purpose: reads a matrix and creates a new one of a different dimensions, can read in a matrix or a vector and return a matrix or a vector.

size
  -> purpose: returns the size of a matrix

isvector
  -> purpose: returns true if the matrix has only one dimension

isscalar
  -> purpose: returns true if there is only one element in this matrix

numel
  -> purpose: returns the number of elements in a matrix

diag(arg: complex_matrix)
  -> purpose: returns a vector which is the diagonal of a matrix

diag(arg: complex_vector)
  -> purpose: returns a matrix which as the argument as its diag

blkdiag(arg: complex_vector)
  -> purpose: returns the block diagonal of a vector.

blockdiag(arg: complex_matrix, rep : positive)
  -> purpose: replicates matrix "arg" along the diagonal of the resultant matrix "rep" times.

repmat(arg, rows, columns)
  -> purpose: replicates the "arg" matrix rows*columns times

tril
  -> purpose: returns the lower triangle of a matrix

triu
  -> purpose: returns the upper triangle of a matrix

submatrix(arg, row, column, rows, columns)
  -> purpose: returns complex_matrix please see above for details

submatrix(arg, row, column, rows, columns)
  -> purpose: returns a complex_vector

buildmatrix(arg, result, row, column)
  -> purpose: returns a submatrix from the input matrix, starting at location x, y.

buildmatrix(arg, result, row, column)
  -> purpose: builds a matrix
  -> requeriment: "arg" is a vector

insertcolumn(arg, result, row, column)
  -> purpose: inserts a column
  -> requeriment: "arg" is a vector

exclude(arg, row, column)
  -> purpose: returns a matrix with the designated row and column removed.


conversion functions
to_integer(complex_matrix)
  -> purpose: converts a complex_matrix into an integer_matrix with the same dimensions.

to_integer(complex_vector)
  -> purpose: converts a complex_vector into an integer_vector with the same dimensions

to_complex(integer_matrix)
  -> purpose: converts an integer_matrix into a complex_matrix with the same dimensions.

to_complex(integer_vector)
  -> purpose: converts an integer_vector into a complex_vector with the same dimensions..
