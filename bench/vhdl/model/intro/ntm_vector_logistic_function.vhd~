--------------------------------------------------------------------------------
--                                            __ _      _     _               --
--                                           / _(_)    | |   | |              --
--                __ _ _   _  ___  ___ _ __ | |_ _  ___| | __| |              --
--               / _` | | | |/ _ \/ _ \ '_ \|  _| |/ _ \ |/ _` |              --
--              | (_| | |_| |  __/  __/ | | | | | |  __/ | (_| |              --
--               \__, |\__,_|\___|\___|_| |_|_| |_|\___|_|\__,_|              --
--                  | |                                                       --
--                  |_|                                                       --
--                                                                            --
--                                                                            --
--              Peripheral-NTM for MPSoC                                      --
--              Neural Turing Machine for MPSoC                               --
--                                                                            --
--------------------------------------------------------------------------------

-- Copyright (c) 2020-2021 by the author(s)
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
--------------------------------------------------------------------------------
-- Author(s):
--   Paco Reina Campo <pacoreinacampo@queenfield.tech>

-- Code your design here
library IEEE;
  use IEEE.std_logic_1164.all;
  use ieee.numeric_std.all;
  

entity adder1 is
  generic (
    G_ADDER_WIDTH : positive := 4
  );
  port (
    reset_n : in  std_logic;
  	clk     : in  std_logic;
  	a       : in  unsigned(G_ADDER_WIDTH - 1 downto 0);
    b       : in  unsigned(G_ADDER_WIDTH - 1 downto 0);
    y       : out unsigned(G_ADDER_WIDTH downto 0)
  );
end entity adder1;



architecture rtl of adder1 is

begin


  -- "rtl" model of adder
  Adder1P : process (clk, reset_n) is
    variable v_carry : std_logic;
  begin
    if(reset_n = '0') then
      y <= (others => '0');
    elsif(rising_edge(clk)) then
      v_carry := '0';
      for index in 0 to G_ADDER_WIDTH - 1 loop
        if(index = 0) then
          y(index) <= a(index) xor b(index);
        else
          y(index) <= a(index) xor b(index) xor v_carry;
        end if;
        v_carry := (a(index) and b(index)) or
      		       (a(index) and v_carry)  or
                   (b(index) and v_carry);
      end loop;
      y(G_ADDER_WIDTH) <= v_carry;
    end if;
  end process Adder1P;


end architecture rtl;
